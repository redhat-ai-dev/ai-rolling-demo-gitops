apiVersion: batch/v1
kind: Job
metadata:
  name: update-deployment-containers
  annotations:
    argocd.argoproj.io/hook: PostSync
spec:
  template:
    spec:
      containers:
        - name: patch-deployment
          image: quay.io/redhat-ai-dev/utils:latest
          command: ["/bin/bash", "-c"]
          args:
            - |
              DEPLOYMENT="rolling-demo-backstage"
              NAMESPACE="rolling-demo-ns"

              echo "Waiting deployment ${DEPLOYMENT} to be available.."
              kubectl rollout status deployment/$DEPLOYMENT -n $NAMESPACE --timeout=600s

              echo "Checking if containers already exist in deployment..."
              CONTAINERS=$(kubectl get deployment $DEPLOYMENT -n $NAMESPACE -o json | jq '.spec.template.spec.containers[] | .name')

              # Create temp dir and files
              TEMP_DIR=$(mktemp -d)
              PATCH_FILE="${TEMP_DIR}/patch.json"

              cat > "${TEMP_DIR}/road-core-sidecar.json" <<EOF
              {
                "name": "road-core-sidecar",
                "env": [
                  { "name": "PROJECT", "value": "rhdh" },
                  { "name": "RCS_CONFIG_FILE", "value": "/app-root/config/rcsconfig.yaml" },
                  { "name": "RHDH_CONFIG_FILE", "value": "/app-root/config/app-config-rhdh.yaml" }
                ],
                "envFrom": [
                  { "secretRef": { "name": "secrets-rhdh" } }
                ],
                "image": "quay.io/redhat-ai-dev/road-core-service:latest",
                "ports": [{ "containerPort": 8080, "name": "rcs-backend", "protocol": "TCP" }],
                "volumeMounts": [
                  { "mountPath": "/app-root/config/rcsconfig.yaml", "name": "rcsconfig", "subPath": "rcsconfig.yaml" },
                  { "mountPath": "/app-root/config/app-config-rhdh.yaml", "name": "app-config-rhdh", "subPath": "app-config.yaml" }
                ]
              }
              EOF

              # build the file used for patching
              echo "[" > "$PATCH_FILE"

              add_patch_operation() {
                local operation=$1
                local path=$2
                local json_file=$3
                local is_last=$4
                
                echo "  {" >> "$PATCH_FILE"
                echo "    \"op\": \"$operation\"," >> "$PATCH_FILE"
                echo "    \"path\": \"$path\"," >> "$PATCH_FILE"
                echo "    \"value\": $(cat $json_file)" >> "$PATCH_FILE"
                if [ "$is_last" = "true" ]; then
                  echo "  }" >> "$PATCH_FILE"
                else
                  echo "  }," >> "$PATCH_FILE"
                fi
              }

              if echo "$CONTAINERS" | grep -q '"road-core-sidecar"'; then
                echo "Container 'road-core-sidecar' already exists, will replace..."
                ROAD_CORE_SIDECAR_INDEX=$(kubectl get deployment $DEPLOYMENT -n $NAMESPACE -o json | jq '.spec.template.spec.containers | map(.name == "road-core-sidecar") | index(true)')
                add_patch_operation "replace" "/spec/template/spec/containers/$ROAD_CORE_SIDECAR_INDEX" "${TEMP_DIR}/road-core-sidecar.json" "true"
              else
                echo "Container 'road-core-sidecar' does not exist, will add..."
                add_patch_operation "add" "/spec/template/spec/containers/-" "${TEMP_DIR}/road-core-sidecar.json" "true"
              fi

              echo "]" >> "$PATCH_FILE"

              echo "Applied in detail:"
              cat "$PATCH_FILE" | jq '.'

              echo "Patching ${DEPLOYMENT} .."
              kubectl patch deployment $DEPLOYMENT -n $NAMESPACE --type='json' --patch="$(cat $PATCH_FILE)"
      restartPolicy: OnFailure
  backoffLimit: 4
